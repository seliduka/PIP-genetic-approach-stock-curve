DSF <- rbind(colSums(DXXX)/(nrow(DXXX)))
return(DSF)
}
# 取所有分段加起來的平均
DS <- NULL
for(D in c(1:50)){
DS <- rbind(DS, paste("D", D, sep=""))
}
DSF <- c(NULL,NULL)
for(F in c(1:50)){
DSF <- rbind(DSF,c(paste("DF", F, sep=""),sum_fit(get(DS[F,1]))[1,2]))
}
# Selection best
sel <- DSF[which.min(DSF[,2]),1]
sel <- cbind("Ganeration" = 1, "pattern" = sel, "fitness" = as.character(min(DSF[,2])))
MinfitG1 <- sel
sel <- get(paste("C",which.min(DSF[,2]), sep=""))
# 初始最好是CXX，第一世代
MinfitG <- MinfitG1
GD1 <- paste("D",which.min(DSF[,2]), sep="")
GD1 <- get(GD1)
GD2 <- NULL
GU <- 2
assign(paste("G",GU, sep=""),list(C1 = sel))
# 比對所有染色體適應值，取平均最低為C1（C1不會經歷交配突變取代）
# 新一代C1先儲存在XXXXXXX裡，等49個子代做完，最後才成為新一代C1
# }
# 將適應值歸一化
MinC1 <- sel
Gener <- NULL
repeat {
assign(paste("G",GU, sep=""),list(Cr = MinC1))
# roulette selection
ADSF <- as.data.frame(DSF)
ADSF$fitness <- as.numeric(as.character(ADSF$fitness))
ADSF <- ADSF[-which.min(ADSF$fitness),]
row.names(ADSF) <- c(1:nrow(ADSF))
ADSF$V1 <- as.numeric(row.names(ADSF))
ADSF$fitness <- (1/ADSF$fitness)
ADSF$fitness <- (ADSF$fitness/colSums(ADSF)[2])
# ADSF$fitness <- (ADSF$fitness-min(ADSF$fitness))/(max(ADSF$fitness)-min(ADSF$fitness))
# rou <- 1/colSums(ADSF)[2]
# ADSF <- as.data.frame(t(ADSF))
sample(c(1:49),size = 2, replace = TRUE,prob = c(ADSF$fitness))
# 最好的剔除
# 全數*上1/和
# 標準化後做輪盤法則
# 下一代的C1是這代最小的
# Crossover
for(Cr in c(1:10)){
Cparent <- as.matrix(paste("C", sample(c(1:49),size = 2, replace = TRUE,prob = c(ADSF$fitness)),sep=""))
Cparent
# Cparent <- as.matrix(sample(c(1:50),size = 2, replace = TRUE,prob = c(ADSF[2,]*rou)))
# get(paste("G", GU-1, sep = ""))[Cparent[1]][[1]][,1]
# get(paste("G", GU-1, sep = ""))
CutPt <- round(runif(1, 1, nrow(ps)))
# Cnew1 <-c(get(Cparent[1])[which(get(Cparent[1])[,1]<CutPt),1],get(Cparent[2])[which(get(Cparent[2])[,1]>CutPt),1])
Cnew1 <-c(get(paste("G", GU-1, sep = ""))[Cparent[1]][[1]][which(get(paste("G", GU-1, sep = ""))[Cparent[1]][[1]][,1]<CutPt),1],get(paste("G", GU-1, sep = ""))[Cparent[2]][[1]][which(get(paste("G", GU-1, sep = ""))[Cparent[2]][[1]][,1]>CutPt),1])
Cnew1 <- as.data.frame(Cnew1)
Cnew1 <- as.data.frame(cbind(T = Cnew1[,1], A = ps[Cnew1[,1],2]))
# 不會出現Cparent[1]末端小於Caprent[2]前端的情況，他們都與CutPt比大小
# Cutpt BUG 17/10/27
Cnew2 <-c(get(paste("G", GU-1, sep = ""))[Cparent[2]][[1]][which(get(paste("G", GU-1, sep = ""))[Cparent[2]][[1]][,1]<CutPt),1],get(paste("G", GU-1, sep = ""))[Cparent[1]][[1]][which(get(paste("G", GU-1, sep = ""))[Cparent[1]][[1]][,1]>CutPt),1])
Cnew2 <- as.data.frame(Cnew2)
Cnew2 <- as.data.frame(cbind(T = Cnew2[,1], A = ps[Cnew2[,1],2]))
# assign(paste("C", (Cr+10), sep=""),Cnew2)
# assign(paste("G", GU, sep = "")[Cr+10][[1]],Cnew2)
tar <- NULL
LA <- length(Cnew1$T)
FA <- length(Cnew2$T)
for (sl in c(2:(LA-1))) {
tar <- rbind(tar,c(length(Cnew1$T[sl]:Cnew1$T[sl-1]),length(Cnew1$T[sl]:Cnew1$T[sl+1])))
}
for (s2 in c(2:(FA-1))) {
tar <- rbind(tar,c(length(Cnew2$T[s2]:Cnew2$T[s2-1]),length(Cnew2$T[s2]:Cnew2$T[s2+1])))
}
if(any(tar<=10)){
repeat{
Cparent <- as.matrix(paste("C", sample(c(1:49),size = 2, replace = TRUE,prob = c(ADSF$fitness)),sep=""))
CutPt <- round(runif(1, 1, nrow(ps)))
Cnew1 <-c(get(paste("G", GU-1, sep = ""))[Cparent[1]][[1]][which(get(paste("G", GU-1, sep = ""))[Cparent[1]][[1]][,1]<CutPt),1],get(paste("G", GU-1, sep = ""))[Cparent[2]][[1]][which(get(paste("G", GU-1, sep = ""))[Cparent[2]][[1]][,1]>CutPt),1])
Cnew1 <- as.data.frame(Cnew1)
Cnew1 <- as.data.frame(cbind(T = Cnew1[,1], A = ps[Cnew1[,1],2]))
Cnew2 <-c(get(paste("G", GU-1, sep = ""))[Cparent[2]][[1]][which(get(paste("G", GU-1, sep = ""))[Cparent[2]][[1]][,1]<CutPt),1],get(paste("G", GU-1, sep = ""))[Cparent[1]][[1]][which(get(paste("G", GU-1, sep = ""))[Cparent[1]][[1]][,1]>CutPt),1])
Cnew2 <- as.data.frame(Cnew2)
Cnew2 <- as.data.frame(cbind(T = Cnew2[,1], A = ps[Cnew2[,1],2]))
tar <- NULL
LA <- length(Cnew1$T)
FA <- length(Cnew2$T)
for (sl in c(2:(LA-1))) {
tar <- rbind(tar,c(length(Cnew1$T[sl]:Cnew1$T[sl-1]),length(Cnew1$T[sl]:Cnew1$T[sl+1])))
}
for (s2 in c(2:(FA-1))) {
tar <- rbind(tar,c(length(Cnew2$T[s2]:Cnew2$T[s2-1]),length(Cnew2$T[s2]:Cnew2$T[s2+1])))
}
if(any(tar<=10)==FALSE) break
}
}
assign(paste("G",GU, sep=""),append(get(paste("G",GU, sep="")),list(Cr = Cnew1)))
assign(paste("G",GU, sep=""),append(get(paste("G",GU, sep="")),list(Cr = Cnew2)))
}
# 更改世代種群裡的染色體名稱
# 不排除重複交配應計數世代
# 有可能交配後長度小於9
# 17/08/05 交配後index不一樣造成length(CXX$T)值為空
# 做20次成為子代
# # Mutation
for(M in c(22:50)){
Mparent <- as.matrix(paste("C", sample(c(1:49),size = 1, replace = TRUE,prob = c(ADSF$fitness)), sep=""))
Mparent <- get(paste("G", GU-1, sep = ""))[[Mparent]]
# # 輪盤C1-50之中的2個
Ra = 0.5
Rb = 1-Ra
Nr = runif(1,0,1)
buf <- round(runif(1,1,nrow(ps)))
# # 隨機增加的那個點
if(Nr<=Ra){
Cnew3 <- rbind(Mparent, c(ps[buf,1],ps[buf,2]))
Cnew3 <- Cnew3[order(Cnew3$T),]
rownames(Cnew3) <- 1:length(Cnew3$A)
# 如果Cnew3任一點與前後差不到10，repeat
tar <- NULL
LA <- length(Cnew3$T)
for (sl in c(2:(LA-1))) {
tar <- rbind(tar,c(length(Cnew3$T[sl]:Cnew3$T[sl-1]),length(Cnew3$T[sl]:Cnew3$T[sl+1])))
}
if(any(tar<=10)){
repeat {
buf <- round(runif(1,1,nrow(ps)))
Cnew3 <- rbind(Mparent, c(ps[buf,1],ps[buf,2]))
Cnew3 <- Cnew3[order(Cnew3$T),]
rownames(Cnew3) <- 1:length(Cnew3$A)
###########################
tar <- NULL
LA <- length(Cnew3$A)
for (sl in c(2:(LA-1))) {
tar <- rbind(tar,c(length(Cnew3$T[sl]:Cnew3$T[sl-1]),length(Cnew3$T[sl]:Cnew3$T[sl+1])))
}
if(any(tar<=10)==FALSE) break
}
}
# }else if(length(Cnew3[which(Cnew3$T==buf),1]:Cnew3[(which(Cnew3$T==buf)-1),1])<10){
#   repeat {
#     buf <- round(runif(1,1,nrow(ps)))
#     Cnew3 <- rbind(get(Mparent), c(ps[buf,1],ps[buf,2]))
#     Cnew3 <- Cnew3[order(Cnew3$T),]
#     rownames(Cnew3) <- 1:length(Cnew3$A)
#     if(length(Cnew3[which(Cnew3$T==buf),1]:Cnew3[(which(Cnew3$T==buf)-1),1])>10) break
#   }
# }else if(length(Cnew3[which(Cnew3$T==buf),1]:Cnew3[(which(Cnew3$T==buf)+1),1])<10){
#   repeat {
#     buf <- round(runif(1,1,nrow(ps)))
#     Cnew3 <- rbind(get(Mparent), c(ps[buf,1],ps[buf,2]))
#     Cnew3 <- Cnew3[order(Cnew3$T),]
#     rownames(Cnew3) <- 1:length(Cnew3$A)
#     if(length(Cnew3[which(Cnew3$T==buf),1]:Cnew3[(which(Cnew3$T==buf)-1),1])>10) break
#   }
# }
}else{
Cnew3 <- Mparent[-round(runif(1,2,(nrow(Mparent)-1))), ]
rownames(Cnew3) <- 1:length(Cnew3$A)
# if(round(runif(1,1,nrow(Mparent))) %in% c(1,nrow(ps))){
#   repeat{
#   Cnew3 <- Mparent[-round(runif(1,1,nrow(Mparent))), ]
#   rownames(Cnew3) <- 1:length(Cnew3$A)
#   if (round(runif(1,1,nrow(Mparent))) %in% c(1,nrow(ps)) == FALSE) break
#   }
# }
}
#解決頭跟尾被突變選中消失 17/11/17
# Cnew3 <- data.frame(T = Cnew3[,1], A = ps[Cnew3[,1],2])
assign(paste("G",GU, sep=""),append(get(paste("G",GU, sep="")),list(Cr = Cnew3)))
}
GUU <- get(paste("G",GU, sep=""))
names(GUU) <- c("C1", "C2", "C3", "C4", "C5", "C6",
"C7", "C8", "C9", "C10", "C11",
"C12", "C13", "C14", "C15", "C16",
"C17", "C18", "C19", "C20", "C21",
"C22", "C23", "C24", "C25", "C26",
"C27", "C28", "C29", "C30", "C31",
"C32", "C33", "C34", "C35", "C36",
"C37", "C38", "C39", "C40", "C41",
"C42", "C43", "C44", "C45", "C46",
"C47", "C48", "C49", "C50")
assign(paste("G",GU, sep=""),GUU)
# 做29次
#################################################
######### 有時無限回圈
#################################################
if(is.null(GD2)){
for(du in c(2:50)){
# U <- paste("C", du, sep="")
DG <- paste("G",GU, sep="")
# assign(paste("D", du, sep=""),segmentmatch(get(U)))
U <- get(DG)[[du]]
assign(paste("GD", du, sep=""),segmentmatch(U))
}
}else{
which.min(DSF[,2])
GD1 <- get(paste("GD",which.min(DSF[,2]), sep=""))
for(du in c(2:50)){
DG <- paste("G",GU, sep="")
U <- get(DG)[[du]]
assign(paste("GD", du, sep=""),segmentmatch(U))
}
}
# 第一代GD的產生，取代初始的D
DS <- NULL
for(D in c(1:50)){
DS <- rbind(DS, paste("GD", D, sep=""))
}
DSF <- NULL
for(F in c(1:50)){
DSF <- rbind(DSF,c(paste("DF", F, sep=""),sum_fit(get(DS[F,1]))[1,2]))
}
#產生GU世代的D
# 加總一段染色體的適應值
# Selection best
sel <- DSF[which.min(DSF[,2]),1]
sel <- cbind("Ganeration" = GU, "pattern" = sel, "fitness" = as.character(DSF[which.min(DSF[,2]),2]))
# as.character(min(DSF[,2]))
MinfitG <- rbind(MinfitG,sel)
MinfitG <- as.data.frame(MinfitG)
NG <- paste("G",GU, sep="")
choo <- which.min(DSF[,2])
Minone <- get(NG)[[choo]]
assign(paste("MGD", 1, sep=""),segmentmatch(Minone))
PTS <- paste("MGD", 1, sep="")
PTS <- get(PTS)
PTS <- PTS[1]
# 取得pattern序列
during <- which.min(DSF[,2])
during <- get(paste("G", GU, sep = ""))[[during]]
Pduring <- NULL
for(d in c(1:(nrow(during)-1))){
Pduring <- rbind(Pduring, length(during[d,1]:during[(d+1),1]))
}
# 取得pattern持續時間
Pduring <- as.data.frame(Pduring)
PSout <- data.frame("pattern" = PTS$pattern,"during" = Pduring$V1)
MinC1 <- during
GC <- get(paste("G", GU, sep = ""))
Gener[[length(Gener)+1]] <- list(GC)
GU <- GU+1
# if (GU==1001) break
if (GU==2) break
}
rownames(MinfitG) <- c(1:nrow(MinfitG))
print(MinfitG)
print(PSout)
# Minfit <- cbind("pattern" = sel, "fitness" = as.character(min(DSF[,2])))
x <- as.matrix(MinfitG$Ganeration)
y <- as.matrix(MinfitG$fitness)
plot(x, y, type="l", xlab="Ganeration",
ylab="fitness", ylim = c(0.12,0.2))
proc.time() - ptm
# write.csv(PSout, file = "PSout1124.csv")
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
# yy <- data.frame(x = ps[U[5,1]:U[6,1],1], y = ps[U[5,1]:U[6,1],2])
# PIP(yy)
#
# ddddd <- data.frame(x = c(1:10),y = c(10,10,10,10,10,10,9,10,10,10))
# PIP(ddddd)
################################################
#21/05/17 問題:突變改變點數，要如何比對板模?
#
#
#
